#!/usr/bin/python3

from __future__ import print_function
import sys
from gzip   import GzipFile
from io     import BytesIO
from ftplib import FTP
from os     import getcwd
import ftplib 
import argparse, os
import os

listOfFiles = []
pdbHomeDir = '/pub/pdb/data/structures/divided/pdb'

def parser():
    description = f"""
    getpdb  is a script for downloading PDB files from the main PDB database(pdb.org) It accepts a list of 
    protein names on the command line or a file with newline separated protein names
"""
    parser = argparse.ArgumentParser(description=description,
                                     formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument('--pdb', required=True, nargs='*',
                        help="PDB IDs like a list rotein1 protein2 protein3 proteins")
    parser.add_argument('-o', '--output-dir', default=getcwd(),
                        help="Path to dowloaded PDB files")
    parser.add_argument('-f', '--file',
                        help="Textfile with list of PDB ID")
    parser.add_argument('-v', '--verbose', default=False, action='store_true',
                        help="Print data in console")
    return parser.parse_args()



def getpdb(pdbID, wantChain, sideChain):
    ftp = FTP('ftp.wwpdb.org')
    ftp.login()
    ftp.cwd(pdbHomeDir)

    pdbSubDirectory = pdbID[1:3]
    ftp.cwd(pdbSubDirectory)
    fileNameInDatabase = f'pdb{pdbID}.ent.gz'
    ftpCommand = 'RETR ' + fileNameInDatabase
    binaryBlob = BytesIO()

    if wantChain:
        print('Downloading sidechain ', sideChain, ' of protein ', pdbID, ' ... \n', end='')
    else:
        print('Downloading protein ', pdbID, ' ... \n',end='')
        
    try:
        ftp.retrbinary(ftpCommand, binaryBlob.write)
    except ftplib.error_perm:
        print('file does not exist')
        binaryBlob.close()
        ftp.cwd(pdbHomeDir)

    binaryBlob.seek(0)
    
    decompressedFile = GzipFile(fileobj=binaryBlob)
    decompressedFileData = decompressedFile.read()

    if wantChain:
        decompressedFileDataLines = decompressedFileData.strip().split('\n')
        filterNonAtoms = [line for line in decompressedFileDataLines if line.startswith('ATOM')]
        filterNotRightSidechain = [line for line in filterNonAtoms if line[21:22] == sideChain]
        decompressedFileData = '\n'.join(filterNotRightSidechain)
    
    
    binaryBlob.close()
    ftp.quit()
    #print(decompressedFileData)
    return decompressedFileData


def save(data, pdbID, wantChain, sideChain, output_dir):
    if wantChain:
            pdbFileName = pdbID + sideChain + '.pdb'
    else:
            pdbFileName = pdbID + '.pdb'

    with open(os.path.join(output_dir, pdbFileName), 'wb') as outputFile:
        outputFile.write(data)
    outputFile.close()



def main():
    args = parser()
    if args.file:
        fileData = open(fileName).read()
        listOfFiles = fileData.strip().split('\n')
    else:
        listOfFiles = args.pdb

    print(listOfFiles)
    for pdbID in listOfFiles:
        wantChain = False
        sideChain = ''
        if len(pdbID) > 4:
            if len(pdbID) == 5:
                wantChain = True
                sideChain = pdbID[-1]
                pdbID = pdbID[:-1]
            else:
                print('Non standard PDB file: ', pdbID, ' ... skipping')
                continue
        try:
            data = getpdb(pdbID, wantChain, sideChain)
        except Exception as e:
            print(e)
            continue
        save(data, pdbID, wantChain, sideChain, args.output_dir)
    
        if args.verbose:
            print(data)

        print('[Done]')




if __name__ == '__main__':
    main()
